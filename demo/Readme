Single-message update July 04

Still need to produce and verify challenge, with hash, Fiat-Shamir

Status update July 03

Working with 2048-bit numbers; output fragment

Establishing zero knowledge common reference string
Parameters
Modulus 23381038503885629607924901022207420607590135514478331692411884786502665132660794060525107680726462184850566382963859125286176937192258934565918887871109964835063139808254572834787536251304821965099572011319596496706986095436155274767058765079570127851923231353160388128194243722445608506021047613719201527312106673996512965055860470530620100415508499054575550668233624871637860791467720256737611590826909422678918225675372675872462365885161417372225875936303798348693399914431097471303795584031526977937942371143871035043043160782277185909881146141178329269031358921928547365107852002771364367957631827543859850964039.
...
Proof verified OK

Private location verification demo status June 29

Is working:
All equations (8) and (9) verify properly
All responses to eq8 and eq9 are ok
commitments s_U, sa, t_n, t_a, b_0, b_1 are ok
set parameters, set center, set node location, calculate radius-square are ok
printing challenges and responses ok

Still to do:
pick random numbers instead of fixed
change setup to bignumbers after debug
introduce key-press for pause (not for docker)
parse command-line parameter from docker for center and node location

Specific setup for testing:
alpha[] = {2, 3, 4, 0}     @Prover::step_start()
    a[] = {0, 3, 1, 4}     @get_airdrop_radius()
 beta[] =   {3, 2, 1}      @Prover::step_start()
x_n, y_n, z_n, r = {2, 1, 3, 1}   @main(), set_node_location()
x_l, y_l, z_l = {3, 4, 5}         @main()

Testing output:

Parameters
Modulus 11.
g 4.
g_x 3.
g_y 9.
g_z 5.
g_r 4.
h[0] (a_1 generator) 3.
h[1] (a_2 generator) 9.
h[2] (a_3 generator) 5.
h[3] (a_4 generator) 4.
Location commitment s_U 9.
Radius-squared 40
Commitment b_0 4.
Commitment b_1 9.
Commitment s_a 5.
Commitment t_a 9.
Commitment t_n 5.
Responses
X_n 11.
Y_n 6.
Z_n 13.
R  6.
A_1 2.
A_2 15.
A_3 8.
A_4 16.
R_a 11.
R_d 12.
Proof verified OK
